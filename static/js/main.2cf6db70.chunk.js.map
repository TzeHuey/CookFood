{"version":3,"sources":["logo.svg","VideoComponent.js","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","VideoComponent","props","loaded","vidName","url","slice","width","height","src","frameborder","allow","allowfullscreen","Recipe","state","recipe","handleClick","bind","fetch","then","response","json","data","setState","meals","ingredients","i","this","push","ingredientsList","map","ingredient","key","unloadedBlock","className","type","onClick","loadedBlock","strMeal","strMealThumb","alt","strInstructions","strYoutube","href","strSource","target","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,0JCmB5BC,MAjBf,SAAwBC,GACtB,GAAIA,EAAMC,OAAQ,CAChB,IAAIC,EAAUF,EAAMG,IAAIC,OAAO,IAC/B,OACE,4BACEC,MAAM,MACNC,OAAO,MACPC,IAAK,iCAAmCL,EACxCM,YAAY,IACZC,MAAM,0EACNC,iBAAe,IAIrB,OAAO,MC6GMC,E,YAzHb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXX,QAAQ,EACRY,OAAQ,IAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANP,E,2EASC,IAAD,OACZC,MAAM,sDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZpB,QAAQ,EACRY,OAAQO,EAAKE,MAAM,U,+BAMzB,IADA,IAAIC,EAAc,GACTC,EAAI,EAAGA,GAAK,GAAIA,IACnBC,KAAKb,MAAMC,OAAX,uBAAkCW,KACpCD,EAAYG,KACVD,KAAKb,MAAMC,OAAX,uBAAkCW,IAChC,MACAC,KAAKb,MAAMC,OAAX,oBAA+BW,KAKvC,IAAIG,EAAkBJ,EAAYK,KAChC,SAAAC,GAAU,OAAkB,wBAAIC,IAAKD,GAAaA,MAGhDE,EACF,yBAAKC,UAAU,YACb,wBAAIA,UAAU,aAAd,2BACA,+EACA,4BACEC,KAAK,SACLD,UAAU,yBACVE,QAAST,KAAKX,aAHhB,iBAUAqB,EACF,6BACE,yBAAKH,UAAU,0CACb,6BACE,uBAAGA,UAAU,gBAAb,4BAEF,yBAAKA,UAAU,uBACb,uBAAGA,UAAU,WAAb,oDAGA,4BACEC,KAAK,SACLD,UAAU,yBACVE,QAAST,KAAKX,aAHhB,kBASJ,yBAAKkB,UAAU,mBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,aAAaP,KAAKb,MAAMC,OAAOuB,SAC7C,yBACEJ,UAAU,mBACVzB,IAAKkB,KAAKb,MAAMC,OAAOwB,aACvBC,IAAKb,KAAKb,MAAMC,OAAOuB,UAEzB,wBAAIJ,UAAU,iBAAiBL,GAC/B,2BAAIF,KAAKb,MAAMC,OAAO0B,kBAGxB,yBAAKP,UAAU,iBACb,yBACEA,UAAU,YACVzB,IAAKkB,KAAKb,MAAMC,OAAOwB,aACvBC,IAAKb,KAAKb,MAAMC,OAAOuB,YAI7B,yBAAKJ,UAAU,2CACb,kBAAC,EAAD,CACE/B,OAAQwB,KAAKb,MAAMX,OACnBE,IAAKsB,KAAKb,MAAMC,OAAO2B,cAG3B,gCACE,2BACE,uBACEC,KAAMhB,KAAKb,MAAMC,OAAO6B,UACxBV,UAAU,eACVW,OAAO,UAHT,kBAQF,2BACE,uBACEF,KAAK,oCACLT,UAAU,iBACVW,OAAO,UAHT,iBAYR,OAAQlB,KAAKb,MAAMX,OAAyBkC,EAAhBJ,M,GAtHXa,IAAMC,WCaZC,E,YAVb,aAAe,IAAD,8BACZ,+CACKlC,MAAQ,GAFD,E,sEAMZ,OAAO,kBAAC,EAAD,U,GAPOgC,IAAMC,WCOJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,kB","file":"static/js/main.2cf6db70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction VideoComponent(props) {\r\n  if (props.loaded) {\r\n    let vidName = props.url.slice(-11);\r\n    return (\r\n      <iframe\r\n        width=\"560\"\r\n        height=\"315\"\r\n        src={\"https://www.youtube.com/embed/\" + vidName}\r\n        frameborder=\"0\"\r\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n        allowfullscreen\r\n      ></iframe>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default VideoComponent;\r\n","import React from \"react\";\r\nimport VideoComponent from \"./VideoComponent\";\r\n\r\nclass Recipe extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loaded: false,\r\n      recipe: \"\"\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    fetch(\"https://www.themealdb.com/api/json/v1/1/random.php\")\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({\r\n          loaded: true,\r\n          recipe: data.meals[0]\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    let ingredients = [];\r\n    for (let i = 1; i <= 20; i++) {\r\n      if (this.state.recipe[`strIngredient${i}`]) {\r\n        ingredients.push(\r\n          this.state.recipe[`strIngredient${i}`] +\r\n            \" - \" +\r\n            this.state.recipe[`strMeasure${i}`]\r\n        );\r\n      }\r\n    }\r\n\r\n    let ingredientsList = ingredients.map(\r\n      ingredient => (ingredient = <li key={ingredient}>{ingredient}</li>)\r\n    );\r\n\r\n    let unloadedBlock = (\r\n      <div className=\"unloaded\">\r\n        <h1 className=\"display-3\">Random recipe generator</h1>\r\n        <p>Hit a button to get one of the delicious recipes</p>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary btn-lg\"\r\n          onClick={this.handleClick}\r\n        >\r\n          Get a recipe\r\n        </button>\r\n      </div>\r\n    );\r\n\r\n    let loadedBlock = (\r\n      <div>\r\n        <nav className=\"navbar fixed-top navbar-light bg-light\">\r\n          <div>\r\n            <a className=\"navbar-brand\">Random recipe generator</a>\r\n          </div>\r\n          <div className=\"navbar-button-block\">\r\n            <p className=\"desktop\">\r\n              Hit a button to get one of the delicious recipes\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-sm\"\r\n              onClick={this.handleClick}\r\n            >\r\n              Get a recipe\r\n            </button>\r\n          </div>\r\n        </nav>\r\n        <div className=\"recipeContainer\">\r\n          <div className=\"instructions\">\r\n            <h1 className=\"display-4\">{this.state.recipe.strMeal}</h1>\r\n            <img\r\n              className=\"img-fluid mobile\"\r\n              src={this.state.recipe.strMealThumb}\r\n              alt={this.state.recipe.strMeal}\r\n            ></img>\r\n            <ul className=\"list-unstyled\">{ingredientsList}</ul>\r\n            <p>{this.state.recipe.strInstructions}</p>\r\n          </div>\r\n\r\n          <div className=\"media desktop\">\r\n            <img\r\n              className=\"img-fluid\"\r\n              src={this.state.recipe.strMealThumb}\r\n              alt={this.state.recipe.strMeal}\r\n            ></img>\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-md-center video-div\">\r\n          <VideoComponent\r\n            loaded={this.state.loaded}\r\n            url={this.state.recipe.strYoutube}\r\n          />\r\n        </div>\r\n        <footer>\r\n          <p>\r\n            <a\r\n              href={this.state.recipe.strSource}\r\n              className=\"text-primary\"\r\n              target=\"_blank\"\r\n            >\r\n              Recipe source\r\n            </a>\r\n          </p>\r\n          <p>\r\n            <a\r\n              href=\"https://www.themealdb.com/api.php\"\r\n              className=\"text-secondary\"\r\n              target=\"_blank\"\r\n            >\r\n              API source\r\n            </a>\r\n          </p>\r\n        </footer>\r\n      </div>\r\n    );\r\n\r\n    return !this.state.loaded ? unloadedBlock : loadedBlock;\r\n  }\r\n}\r\n\r\nexport default Recipe;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Recipe from \"./Recipe\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  render() {\n    return <Recipe />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}