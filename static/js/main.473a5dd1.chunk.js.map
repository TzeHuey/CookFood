{"version":3,"sources":["Dropdown.js","NavBar.js","UnloadedBlock.js","VideoComponent.js","Footer.js","LoadedBlock.js","Recipe1.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","className","classNameButton","type","id","data-toggle","aria-haspopup","aria-expanded","onClick","handlerMarginTop","aria-labelledby","handleClick","name","categories","map","item","key","NavBar","state","UnloadedBlock","unloadedMarginTop","unloadedHeaderP","bind","fetch","then","response","json","data","setState","strCategory","this","style","marginTop","display","testText","React","Component","VideoComponent","loaded","vidName","url","slice","width","height","title","src","frameBorder","allow","allowFullScreen","Footer","href","target","rel","LoadedBlock","recipe","category","randomItemId","meals","Math","floor","random","length","idMeal","ingredients","i","push","ingredient","fetchRecipe","targetCategory","prevProps","event","ingredientsList","getIngredients","strMeal","strMealThumb","alt","strInstructions","strYoutube","strSource","Recipe","handleNavHeaderClick","App","Recipe1","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.473a5dd1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Dropdown(props) {\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <button\r\n        className={props.classNameButton}\r\n        type=\"button\"\r\n        id=\"dropdownMenuButton\"\r\n        data-toggle=\"dropdown\"\r\n        aria-haspopup=\"true\"\r\n        aria-expanded=\"false\"\r\n        onClick={props.handlerMarginTop}\r\n      >\r\n        Choose <span className=\"desktop\">recipe </span>category\r\n      </button>\r\n      <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n        <button\r\n          className=\"dropdown-item\"\r\n          type=\"button\"\r\n          onClick={props.handleClick}\r\n          name=\"random\"\r\n        >\r\n          Random\r\n        </button>\r\n        {props.categories.map(item => {\r\n          return (\r\n            <button\r\n              className=\"dropdown-item\"\r\n              type=\"button\"\r\n              key={item}\r\n              name={item}\r\n              onClick={props.handleClick}\r\n            >\r\n              {item}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport Dropdown from \"./Dropdown\";\r\n\r\nfunction NavBar(props) {\r\n  return (\r\n    <nav className=\"navbar fixed-top navbar-light bg-light\">\r\n      <div>\r\n        <div id=\"navHeader\" className=\"navbar-brand\" onClick={props.onClick}>\r\n          <span className=\"desktop\">Random recipe </span>\r\n          <span className=\"Mobile\">Recipe </span>generator\r\n        </div>\r\n      </div>\r\n      <div className=\"navbar-button-block\">\r\n        <p className=\"desktop\">\r\n          Hit a button to get one of the delicious recipes\r\n        </p>\r\n        <Dropdown\r\n          categories={props.state.categories}\r\n          handleClick={props.handleClick}\r\n          classNameButton=\"btn btn-primary btn-sm dropdown-toggle\"\r\n        />\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport Dropdown from \"./Dropdown\";\r\n\r\nclass UnloadedBlock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      categories: [],\r\n      unloadedMarginTop: \"25vh\",\r\n      unloadedHeaderP: \"block\"\r\n    };\r\n    this.handlerMarginTop = this.handlerMarginTop.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://www.themealdb.com/api/json/v1/1/categories.php\")\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({\r\n          categories: data.categories.map(item => item.strCategory)\r\n        });\r\n      });\r\n  }\r\n\r\n  handlerMarginTop() {\r\n    this.setState({ unloadedMarginTop: \"5vh\", unloadedHeaderP: \"none\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"unloaded\"\r\n        style={{ marginTop: this.state.unloadedMarginTop }}\r\n      >\r\n        <h1 className=\"display-3\">Random recipe generator</h1>\r\n        <p style={{ display: this.state.unloadedHeaderP }}>\r\n          Choose category and hit a button to get one of the delicious recipes\r\n        </p>\r\n        <p>{this.props.state.testText}</p>\r\n        <Dropdown\r\n          categories={this.state.categories}\r\n          handleClick={this.props.handleClick}\r\n          handlerMarginTop={this.handlerMarginTop}\r\n          classNameButton=\"btn btn-primary dropdown-toggle\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UnloadedBlock;\r\n","import React from \"react\";\r\n\r\nfunction VideoComponent(props) {\r\n  if (props.loaded) {\r\n    let vidName = props.url.slice(-11);\r\n    return (\r\n      <iframe\r\n        width=\"560\"\r\n        height=\"315\"\r\n        title={vidName}\r\n        src={\"https://www.youtube.com/embed/\" + vidName}\r\n        frameBorder=\"0\"\r\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n        allowFullScreen\r\n      ></iframe>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default VideoComponent;\r\n","import React from \"react\";\r\n\r\nfunction Footer(props) {\r\n  return (\r\n    <footer>\r\n      <p>\r\n        <a\r\n          href={props.href}\r\n          className=\"text-primary\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Recipe source\r\n        </a>\r\n      </p>\r\n      <p>\r\n        <a\r\n          href=\"https://www.themealdb.com/api.php\"\r\n          className=\"text-secondary\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          API source\r\n        </a>\r\n      </p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport VideoComponent from \"./VideoComponent\";\r\nimport Footer from \"./Footer\";\r\n\r\nclass LoadedBlock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loaded: null,\r\n      recipe: \"\"\r\n    };\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  fetchRecipe(category) {\r\n    var randomItemId = \"\";\r\n    if (category === \"random\") {\r\n      fetch(\"https://www.themealdb.com/api/json/v1/1/random.php\")\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          this.setState({\r\n            loaded: true,\r\n            recipe: data.meals[0]\r\n          });\r\n        });\r\n    } else {\r\n      fetch(`https://www.themealdb.com/api/json/v1/1/filter.php?c=${category}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          randomItemId =\r\n            data.meals[Math.floor(Math.random() * data.meals.length)].idMeal;\r\n          return fetch(\r\n            `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${randomItemId}`\r\n          );\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          this.setState({\r\n            loaded: true,\r\n            recipe: data.meals[0]\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  getIngredients() {\r\n    let ingredients = [];\r\n    for (let i = 1; i <= 20; i++) {\r\n      if (this.state.recipe[`strIngredient${i}`]) {\r\n        ingredients.push(\r\n          this.state.recipe[`strIngredient${i}`] +\r\n            \" - \" +\r\n            this.state.recipe[`strMeasure${i}`]\r\n        );\r\n      }\r\n    }\r\n    return ingredients.map(\r\n      ingredient => (ingredient = <li key={ingredient}>{ingredient}</li>)\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchRecipe(this.props.state.targetCategory);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.state.targetCategory !== prevProps.state.targetCategory) {\r\n      this.fetchRecipe(this.props.state.targetCategory);\r\n    }\r\n  }\r\n\r\n  handleClick(event) {\r\n    this.fetchRecipe(event.target.name);\r\n  }\r\n\r\n  render() {\r\n    let ingredientsList = this.getIngredients();\r\n    return (\r\n      <div>\r\n        <div className=\"recipeContainer\">\r\n          <div className=\"instructions\">\r\n            <h1 className=\"display-4\">{this.state.recipe.strMeal}</h1>\r\n            <img\r\n              className=\"img-fluid mobile\"\r\n              src={this.state.recipe.strMealThumb}\r\n              alt={this.state.recipe.strMeal}\r\n            ></img>\r\n            <ul className=\"list-unstyled\">{ingredientsList}</ul>\r\n            <p>{this.state.recipe.strInstructions}</p>\r\n          </div>\r\n\r\n          <div className=\"media desktop\">\r\n            <img\r\n              className=\"img-fluid\"\r\n              src={this.state.recipe.strMealThumb}\r\n              alt={this.state.recipe.strMeal}\r\n            ></img>\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-md-center video-div\">\r\n          <VideoComponent\r\n            loaded={this.state.loaded}\r\n            url={this.state.recipe.strYoutube}\r\n          />\r\n        </div>\r\n        <Footer href={this.state.recipe.strSource} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadedBlock;\r\n","import React from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport UnloadedBlock from \"./UnloadedBlock\";\r\nimport LoadedBlock from \"./LoadedBlock\";\r\n\r\nclass Recipe extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loaded: false,\r\n      categories: [],\r\n      unloadedMarginTop: \"25vh\",\r\n      unloadedHeaderP: \"block\",\r\n      targetCategory: \"\"\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleNavHeaderClick = this.handleNavHeaderClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://www.themealdb.com/api/json/v1/1/categories.php\")\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({\r\n          categories: data.categories.map(item => item.strCategory)\r\n        });\r\n      });\r\n  }\r\n\r\n  handleClick(event) {\r\n    let name = event.target.name;\r\n    this.setState({ targetCategory: name, loaded: true });\r\n  }\r\n\r\n  handleNavHeaderClick() {\r\n    this.setState({\r\n      loaded: false,\r\n      unloadedMarginTop: \"25vh\",\r\n      unloadedHeaderP: \"block\"\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return !this.state.loaded ? (\r\n      <UnloadedBlock state={this.state} handleClick={this.handleClick} />\r\n    ) : (\r\n      <div>\r\n        <NavBar\r\n          state={this.state}\r\n          handleClick={this.handleClick}\r\n          onClick={this.handleNavHeaderClick}\r\n        />\r\n        <LoadedBlock\r\n          state={this.state}\r\n          handleNavHeaderClick={this.handleNavHeaderClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Recipe;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Recipe1 from \"./Recipe1\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  render() {\n    return <Recipe1 />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}